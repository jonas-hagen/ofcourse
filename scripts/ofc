#! /usr/bin/env python3
import sys
from os import path
import click
from tabulate import tabulate
from ofcourse import dumpers
from ofcourse import parsers
from ofcourse import renderer


@click.group()
def cli():
    pass


@cli.group("people")
def people_group():
    pass


@cli.group("course")
def course_group():
    pass


@people_group.command("normalize")
@click.argument(
    "filename",
    default="./people.yml",
    type=click.Path(exists=True, dir_okay=False, writable=True),
)
def people_normalize(filename):
    with open(filename, "r") as f:
        person_list = parsers.person_list_parser(f)
    if not person_list:
        exit()
    with open(filename, "w") as f:
        dumpers.person_list_yaml_dumper(f, person_list)


@course_group.command("print")
@click.argument("filename", type=click.Path(exists=True, dir_okay=False))
@click.argument(
    "people-file", default="./people.yml", type=click.Path(exists=True, dir_okay=False)
)
def course_print(filename, people_file):
    with open(people_file, "r") as f:
        person_list = parsers.person_list_parser(f)
    with open(filename, "r") as f:
        course = parsers.course_parser(f, person_list)
    dumpers.course_text_dumper(sys.stdout, course)


@course_group.command("render")
@click.argument(
    "filename", type=click.Path(exists=True, dir_okay=False, resolve_path=True)
)
@click.argument("template-file", type=click.Path(exists=True, dir_okay=False))
@click.argument(
    "people-file",
    default="./people.yml",
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
)
@click.option(
    "--output",
    "-o",
    default=None,
    type=click.Path(resolve_path=True),
    help="Write to this file or path.",
)
@click.option(
    "--force",
    "-f",
    is_flag=True,
    help="Overwrite existing files, only if output is specified.",
)
@click.option(
    "--each-person/--whole-course",
    default=False,
    help="Write a file for each course / person.",
)
@click.option(
    "--env",
    "-e",
    default="default",
    help="Jinja2 enviroment to use: " + ", ".join(renderer.environments.keys()),
    type=click.Choice(list(renderer.environments.keys())),
)
def course_render(
    filename, template_file, people_file, output, force, each_person, env
):
    with open(people_file, "r") as f:
        person_list = parsers.person_list_parser(f)
    with open(filename, "r") as f:
        course = parsers.course_parser(f, person_list)

    if output is None:
        # base of coursefle, ext of template
        output = path.dirname(filename)

    if not each_person:
        if path.isdir(output):
            force = False
            dirname = output
            base = path.basename(path.splitext(filename)[0])
            ext = path.splitext(template_file)[1]
            output = path.join(dirname, base + ext)
        if path.isfile(output) and not force:
            raise FileExistsError(output)

        with open(output, "w") as f:
            f.write(renderer.render(template_file, env, c=course))
        print(output)
    else:
        if not path.isdir(output):
            raise FileNotFoundError("Directory " + output)
        else:
            dirname = output
            base = path.basename(path.splitext(filename)[0])
            ext = path.splitext(template_file)[1]

        for person in course.participants:
            output = path.join(dirname, base + "_" + person.identifier + ":2,DS")
            with open(output, "w") as f:
                f.write(renderer.render(template_file, env, p=person, c=course))
            print(output)


@course_group.command("email")
@click.argument(
    "subject", type=str,
)
@click.argument(
    "course-file", type=click.Path(exists=True, dir_okay=False, resolve_path=True)
)
@click.argument("template-file", type=click.Path(exists=True, dir_okay=False))
@click.argument(
    "people-file",
    default="./people.yml",
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
)
@click.option(
    "--test",
    "-t",
    "test_addr",
    default=None,
    help="Run a test (send to From) or send mails for real.",
)
@click.option(
    "--from", "-f", "from_addr", required=True, help="The From address.",
)
def course_email(
    subject, course_file, template_file, people_file, test_addr, from_addr,
):
    import os
    import smtplib
    from email.message import EmailMessage

    with open(people_file, "r") as f:
        person_list = parsers.person_list_parser(f)
    with open(course_file, "r") as f:
        course = parsers.course_parser(f, person_list)

    smtp_server = os.environ["SMTP_SERVER"]
    smtp_user = os.environ["SMTP_USER"]
    smtp_pass = os.environ["SMTP_PASS"]

    smtp = smtplib.SMTP(smtp_server, port=587)
    smtp.starttls()
    smtp.login(smtp_user, smtp_pass)

    for person in course.participants:
        msg = EmailMessage()
        body = renderer.render(template_file, "default", p=person, c=course)
        msg.set_content(body)
        msg["Subject"] = subject
        msg["From"] = from_addr
        to_addr = test_addr or person.primary_email
        msg["To"] = f"{person.full_name} <{to_addr}>"
        print("Sending message to: ", msg["To"])
        smtp.send_message(msg)

    smtp.close()


if __name__ == "__main__":
    cli()
